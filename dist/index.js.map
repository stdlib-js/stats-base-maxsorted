{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/maxsorted.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} output maximum value\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = maxsorted( 4, arraylike2object( toAccessorArray( x ) ), 2, 1 );\n* // returns 4.0\n*/\nfunction maxsorted( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar v1;\n\tvar v2;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn xget( xbuf, 0 );\n\t}\n\tv1 = xget( xbuf, offsetX );\n\tv2 = xget( xbuf, offsetX + ((N-1)*strideX) );\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZero( v1 ) || isPositiveZero( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = maxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = maxsorted( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction maxsorted( N, x, strideX, offsetX ) {\n\tvar v1;\n\tvar v2;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offsetX ];\n\tv2 = x[ offsetX + ((N-1)*strideX) ];\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZero( v1 ) || isPositiveZero( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = maxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0 ];\n* var N = x.length;\n*\n* var v = maxsorted( N, x, 1 );\n* // returns 3.0\n*/\nfunction maxsorted( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = maxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar maxsorted = require( './maxsorted.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( maxsorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = maxsorted;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a sorted strided array.\n*\n* @module @stdlib/stats-base-maxsorted\n*\n* @example\n* var maxsorted = require( '@stdlib/stats-base-maxsorted' );\n*\n* var x = [ 1.0, 2.0, 3.0 ];\n* var N = x.length;\n*\n* var v = maxsorted( N, x, 1 );\n* // returns 3.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var maxsorted = require( '@stdlib/stats-base-maxsorted' );\n*\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = maxsorted.ndarray( N, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar maxsorted = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = maxsorted;\n\n// exports: { \"ndarray\": \"maxsorted.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAiB,QAAS,2CAA4C,EA0B1E,SAASC,EAAWC,EAAGC,EAAGC,EAASC,EAAU,CAC5C,IAAIC,EACAC,EACAC,EACAC,EAQJ,OALAH,EAAOH,EAAE,KAGTI,EAAOJ,EAAE,UAAW,CAAE,EAEjBD,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAY,EACpBG,EAAMD,EAAM,CAAE,GAEtBE,EAAKD,EAAMD,EAAMD,CAAQ,EACzBI,EAAKF,EAAMD,EAAMD,GAAYH,EAAE,GAAGE,CAAS,EACtCL,EAAOS,CAAG,GAAKT,EAAOU,CAAG,EACtB,IAEHD,IAAOC,EACNT,EAAgBQ,CAAG,GAAKR,EAAgBS,CAAG,EACxC,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CAKAX,EAAO,QAAUG,ICvFjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAiB,QAAS,2CAA4C,EACtEC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IAoBhB,SAASC,EAAWC,EAAGC,EAAGC,EAASC,EAAU,CAC5C,IAAIC,EACAC,EACAC,EAEJ,OAAKN,GAAK,EACF,KAERM,EAAIT,EAAkBI,CAAE,EACnBK,EAAE,iBACCR,EAAWE,EAAGM,EAAGJ,EAASC,CAAQ,EAErCH,IAAM,GAAKE,IAAY,EACpBD,EAAG,CAAE,GAEbG,EAAKH,EAAGE,CAAQ,EAChBE,EAAKJ,EAAGE,GAAYH,EAAE,GAAGE,CAAS,EAC7BP,EAAOS,CAAG,GAAKT,EAAOU,CAAG,EACtB,IAEHD,IAAOC,EACNT,EAAgBQ,CAAG,GAAKR,EAAgBS,CAAG,EACxC,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,GACR,CAKAX,EAAO,QAAUK,IChFjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAoBd,SAASC,EAAWC,EAAGC,EAAGC,EAAU,CACnC,OAAOJ,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,CAAE,CAC5D,CAKAN,EAAO,QAAUG,IClDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICajB,IAAIE,EAAY,IAKhB,OAAO,QAAUA",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isnan", "isPositiveZero", "maxsorted", "N", "x", "strideX", "offsetX", "xbuf", "xget", "v1", "v2", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "isPositiveZero", "arraylike2object", "accessors", "maxsorted", "N", "x", "strideX", "offsetX", "v1", "v2", "o", "require_maxsorted", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "maxsorted", "N", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "maxsorted", "ndarray", "maxsorted"]
}
