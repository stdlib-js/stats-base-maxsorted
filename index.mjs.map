{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/maxsorted.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 2.0, -3.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = maxsorted( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction maxsorted( N, x, strideX, offsetX ) {\n\tvar v1;\n\tvar v2;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tv1 = x[ offsetX ];\n\tv2 = x[ offsetX + ((N-1)*strideX) ];\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZero( v1 ) || isPositiveZero( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nexport default maxsorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {number} output maximum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = maxsorted( 4, arraylike2object( toAccessorArray( x ) ), 2, 1 );\n* // returns 4.0\n*/\nfunction maxsorted( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar xget;\n\tvar v1;\n\tvar v2;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn xget( xbuf, 0 );\n\t}\n\tv1 = xget( xbuf, offsetX );\n\tv2 = xget( xbuf, offsetX + ((N-1)*strideX) );\n\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\treturn NaN;\n\t}\n\tif ( v1 === v2 ) {\n\t\tif ( isPositiveZero( v1 ) || isPositiveZero( v2 ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn v1;\n\t}\n\tif ( v1 > v2 ) {\n\t\treturn v1;\n\t}\n\treturn v2;\n}\n\n\n// EXPORTS //\n\nexport default maxsorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a sorted strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - sorted input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0 ];\n* var N = x.length;\n*\n* var v = maxsorted( N, x, 1 );\n* // returns 3.0\n*/\nfunction maxsorted( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default maxsorted;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport maxsorted from './maxsorted.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( maxsorted, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default maxsorted;\n"],"names":["maxsorted","N","x","strideX","offsetX","v1","v2","o","NaN","arraylike2object","accessorProtocol","xbuf","xget","data","accessors","isnan","isPositiveZero","ndarray","stride2offset","setReadOnly"],"mappings":";;ihBA6CA,SAASA,EAAWC,EAAGC,EAAGC,EAASC,GAClC,IAAIC,EACAC,EACAC,EAEJ,OAAKN,GAAK,EACFO,KAERD,EAAIE,EAAkBP,IACfQ,iBCLR,SAAoBT,EAAGC,EAAGC,EAASC,GAClC,IAAIO,EACAC,EACAP,EACAC,EAQJ,OALAK,EAAOT,EAAEW,KAGTD,EAAOV,EAAEY,UAAW,GAEfb,GAAK,EACFO,IAEG,IAANP,GAAuB,IAAZE,EACRS,EAAMD,EAAM,IAEpBN,EAAKO,EAAMD,EAAMP,GACjBE,EAAKM,EAAMD,EAAMP,GAAYH,EAAE,GAAGE,GAC7BY,EAAOV,IAAQU,EAAOT,GACnBE,IAEHH,IAAOC,EACNU,EAAgBX,IAAQW,EAAgBV,GACrC,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CD3BSQ,CAAWb,EAAGM,EAAGJ,EAASC,GAEvB,IAANH,GAAuB,IAAZE,EACRD,EAAG,IAEXG,EAAKH,EAAGE,GACRE,EAAKJ,EAAGE,GAAYH,EAAE,GAAGE,GACpBY,EAAOV,IAAQU,EAAOT,GACnBE,IAEHH,IAAOC,EACNU,EAAgBX,IAAQW,EAAgBV,GACrC,EAEDD,EAEHA,EAAKC,EACFD,EAEDC,EACR,CEhCA,SAASN,EAAWC,EAAGC,EAAGC,GACzB,OAAOc,EAAShB,EAAGC,EAAGC,EAASe,EAAejB,EAAGE,GAClD,CChBAgB,EAAAnB,EAAA,UAAAiB"}